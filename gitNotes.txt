https://git-scm.com/docs/gitcore-tutorial#:~:text=did%20that%2C%20if%20you%20now%20look%20into%20your%20object%20directory%2C%20you%E2%80%99ll%20notice%20that%20Git%20will%20have%20added%20two%20new%20objects%20to%20the%20object


git update-index --add file1 file2
# add untracked to tracked

# added based on unique content
# same content files will have commit in same folder
# 	aka -> objects/same_folder/zipFile

# object id is folder name appended with that index update
# total aah itll be 40 bytes, with the first 2 from directory name


git cat-file object_id -pts
print content, type, size

# Objects are immutable/they exist forecer once created

git diff-files 
# internal representation of change

git write-tree
# creates tree

## OBJECTS ##

#blobs are git adds
#trees are git commits

git commit-tree
#requires current tree, parent commit tree, commit msg 
#first 2 params as object names

#git commit-tree also wants to get a commit message on its standard input,
#only param requires tree and parent tree

COMMIT SEQUENCE

tree=$(git write-tree)
commit=$(echo 'Initial commit' | git commit-tree $tree)
git update-ref HEAD $commit
-p to give parent

git diff-index INDEX_NAME
#shows diff between working tree and tree at INDEX
aka 
git diff INDEX
#using --cached allows to diff with INDEX ignoring staged changes


-----------

git diff-tree DON HEAD -p --pretty
#diff between any commit trees

git tag TAG_NAME
#writes HEAD To .git/refs/tags/TAG_NAME


= till creating branches
https://git-scm.com/docs/gitcore-tutorial#:~:text=did%20that%2C%20if%20you%20now%20look%20into%20your%20object%20directory%2C%20you%E2%80%99ll%20notice%20that%20Git%20will%20have%20added%20two%20new%20objects%20to%20the%20object
=

git switch -c mybranch
#c for create

git checkout -b mybranch
#create and change into that branch

git checkout -d COMMIT_ID
-d
--detach
Rather than checking out a branch to work on it, check out a commit for inspection

git checkout branch^
#^ parent commit
#^^ grandparent commit

git branch -f main HEAD~3
#moves (by force) the main branch to three parents behind HEAD

git branch -f main COMMIT_ID
#TODO CHECK THIS

git reset HEAD^
#local branch

git revert HEAD^
#commit a new change that removes last commit

either reset + push
or revert

git rebase -i HEAD~4
#4 specifies the 4th ancestor, after which you will modify every descendant
________________________________

let's say you want to change a previous commit

you can reorder commits such that the commit u want to change is in top (git rebase -i HEAD~n)
then you can amend commit (git commit --amend)
then you can order it back to original order (git rebase -i HEAD~n)
____________________________________________________________________

HOW TO SQUASH COMMITS ? WITH AND W/O INTERACTIVE REBASE


====
till https://learngitbranching.js.org/ [ADVANCED GIT TAGS AFTER JUGGLING COMMITS]
===